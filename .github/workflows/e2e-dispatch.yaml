name: E2E Tests - Dispatch

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Top level module to test'
        required: true
        default: 'fundamentals'
        type: choice
        options:
        - fundamentals
        - security
        - networking
        - autoscaling
        - observability
        - automation

permissions:
  id-token: write
  contents: read

jobs:
  run-tests:
    name: run-tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.4.0
        terraform_wrapper: false
    - name: Install utilities
      run: |
        sudo apt install -y gettext

        mkdir -p ${HOME}/.local/bin
        wget https://github.com/jckuester/awsweeper/releases/download/v0.12.0/awsweeper_0.12.0_linux_amd64.tar.gz
        tar zxf awsweeper_0.12.0_linux_amd64.tar.gz
        mv awsweeper_0.12.0_linux_amd64/awsweeper ${HOME}/.local/bin

        echo "${HOME}/.local/bin" >> $GITHUB_PATH
    - name: Get AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Set cluster ID
      env:
        RUN_ID: "${{ github.run_id }}"
      run: |
        CLUSTER_ID="ci-${RUN_ID}"
        echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_ENV
    - name: Create infrastructure
      id: create-infrastructure
      env:
        AWS_REGION: "${{ secrets.AWS_REGION }}"
      run: |
        make create-infrastructure environment="$CLUSTER_ID"
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Run tests - Introduction
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="introduction"
    - name: Run tests - Fundamentals
      if: ${{ (inputs.module == 'fundamentals') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="fundamentals"
    - name: Run tests - Security
      if: ${{ (inputs.module == 'security') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="security"
    - name: Run tests - Autoscaling
      if: ${{ (inputs.module == 'autoscaling') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="autoscaling"
    - name: Run tests - Observability
      if: ${{ (inputs.module == 'observability') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="observability"
    - name: Run tests - Automation
      if: ${{ (inputs.module == 'automation') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="automation"
    - name: Run tests - Networking
      if: ${{ (inputs.module == 'networking') }}
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="networking"
    - name: Run tests - Cleanup
      if: always()
      env:
        DOCKER_BUILDKIT: 1
        DEV_MODE: 1
      run: |
        make test environment="$CLUSTER_ID" module="cleanup"
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Cleanup environment
      if: always()
      run: |
        export CLEANUP_ENVIRONMENT_NAME="$CLUSTER_ID"
        
        envsubst < hack/lib/filter.yml > filter.yml

        cat filter.yml

        awsweeper --force filter.yml

        make destroy-infrastructure
