name: CI

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: test
    runs-on: ubuntu-latest
    env:
      CLUSTER_ID: "ci-${{ github.run_id }}"
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Build environment image
      working-directory: environment
      run: |
           docker build -t environment .
    - name: Build test image
      working-directory: test
      run: |
           docker build -t test .
    - name: Get AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Set cluster ID
      run: echo "TF_VAR_cluster_id=${CLUSTER_ID}" >> $GITHUB_ENV
    - name: Init environment
      working-directory: test/terraform
      timeout-minutes: 60
      run: |
        terraform init -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" -backend-config="key=ci/${CLUSTER_ID}/terraform.tfstate"
        terraform apply --auto-approve
        echo "EKS_CLUSTER_NAME=$(terraform -raw output eks_cluster_id)" >> $GITHUB_ENV
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Run tests
      run: |
           docker run -v site/content:/content -e "EKS_CLUSTER_NAME" -e "AWS_ACCESS_KEY_ID" -e "AWS_SECRET_ACCESS_KEY" -e "AWS_SESSION_TOKEN" test
    - name: Refresh AWS credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1.6.1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-duration-seconds: 3600
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GithubActionsSession
    - name: Cleanup environment
      if: always()
      timeout-minutes: 20
      working-directory: test/terraform
      run: |
        terraform destroy --auto-approve